#pragma checksum "D:\Development\Repos\ShiftTrackerBlazor\ShiftTracker\ShiftTracker.App\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "406fc0b0cc0fb0664fcc3ad607c4f875e81a205b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ShiftTracker.App.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using ShiftTracker.App;
    using ShiftTracker.App.Shared;
    using ShiftTracker.Shared.Models;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 4 "D:\Development\Repos\ShiftTrackerBlazor\ShiftTracker\ShiftTracker.App\Pages\Index.cshtml"
           
    List<Shift> history { get; set; } = new List<Shift>();
    protected Shift ConfiguredShift { get; set; }
    private bool ShowShiftEditor { get; set; } = false;
    private bool ShowShiftAdd { get; set; } = false;
    protected async override Task OnInitAsync()
    {

        //history = await client.GetJsonAsync<List<Shift>>("api/shifthistory");



    }

    protected int NewID()
    {
        if (history == null || history.Count == 0)
        {
            return 1;
        }
        else
        {
            var lastShift = history.Last();

            return lastShift.Id + 1;
        }
    }

   
    protected void SaveEditedShift()
    {
        if(ConfiguredShift.Id == -1)
        {
            ConfiguredShift.Id = NewID();
            history.Add(ConfiguredShift);
        }
        else
        {
            var index = history.FindIndex(x => x.Id == ConfiguredShift.Id);
            history[index] = ConfiguredShift;
        }

        ShowShiftEditor = false;
        StateHasChanged();

    }

    protected void AddNewShiftBtnClick()
    {
        ConfiguredShift = new Shift();
        ShowShiftAdd = true;
        StateHasChanged();
    }



    protected void HideShiftEditorBtnClick()
    {
        ShowShiftAdd = false;
        ShowShiftEditor = false;
        StateHasChanged();
    }

    protected void EditShiftBtnClick(Shift shift)
    {
        ConfiguredShift = shift;
        ShowShiftEditor = true;
        StateHasChanged();
    }

        

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient client { get; set; }
    }
}
#pragma warning restore 1591
